{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Snippets","text":"<ul> <li>Python</li> <li>sh</li> <li>Vercel</li> </ul>"},{"location":"python/","title":"Python","text":"<ul> <li>Django</li> <li>Selenium</li> </ul>"},{"location":"python/django/","title":"Django","text":""},{"location":"python/django/#orchestrator","title":"Orchestrator","text":"orchestrator.py <pre><code>from time import sleep\nfrom os import environ, system, listdir\nfrom os.path import isdir\nfrom sys import argv\n\n\nenviron['DEBUG'] = 'True'\nenviron['ALLOWED_HOSTS'] = '*'\nenviron['DJANGO_SETTINGS_MODULE'] = 'CORE.settings.dev'\n\n# environ['EMAIL_HOST_USER'] = ''\n# environ['EMAIL_HOST_PASSWORD'] = ''\n\n\nsystem('black -S .')\nsystem('find -name \"*.pyc\" -type f -delete')\nsystem('rm -rf `find -type d -name __pycache__`')\n\n\ndef run_false():\n    system('python3 manage.py collectstatic --noinput')\n\n\ndef makemigrations():\n    exclude_list = [\n        'templates',\n        'static',\n        'CORE',\n        'requirements',\n        'staticfiles',\n        'env',\n        'media',\n        'htmlcov',\n    ]\n    apps = [d for d in listdir('.') if isdir(d) and d not in exclude_list]\n    system('python3 manage.py makemigrations ' + ' '.join(apps))\n\n\ndef migrate():\n    system('python3 manage.py migrate')\n\n\ndef test():\n    makemigrations()\n    migrate()\n    environ['DEBUG'] = 'False'\n    system('python3 manage.py collectstatic --noinput')\n\n\ndef cleardb():\n    system('rm -rf `find -type d -name migrations -not -path \"./env/*\"`')\n    system('find -name \"*.sqlite3\" -type f -delete')\n    exit(0)\n\n\ndef populatedb():\n    makemigrations()\n    migrate()\n    system('python3 manage.py populateuser')\n    system('python3 manage.py populatesecret')\n\n\ndef docker():\n    system('docker compose -f docker-compose-dev.yml up')\n\n\ndef coverage():\n    module = argv[2]\n    omit_list = [\n        'orchestrator.py',\n        '*/migrations/*',\n        'manage.py',\n        '*/CORE/*',\n    ]\n    test()\n    system(\n        f'coverage run --source=\\'{module}\\' --omit=\\'{\",\".join(omit_list)}\\' manage.py test {module}'\n    )\n    system('coverage html')\n\n\ndef gunicorn():\n    system('gunicorn CORE.wsgi 0.0.0.0:8000')\n\n\nif argv[1] == 'runserver' and environ.get('DEBUG') == 'False':\n    run_false()\nelif argv[1] == 'makemigrations':\n    makemigrations()\n    exit()\nelif argv[1] == 'test':\n    test()\nelif argv[1] == 'cleardb':\n    cleardb()\nelif argv[1] == 'populatedb':\n    populatedb()\n    exit()\nelif argv[1] == 'docker':\n    docker()\n    system('python3 manage.py ' + ' '.join([i for i in argv[1:]]))\n    exit()\nelif argv[1] == 'coverage':\n    coverage()\n    exit()\nelif argv[1] == 'gunicorn':\n    gunicorn()\n    exit()\n\n\nsleep(3)\nsystem('python3 manage.py ' + ' '.join([i for i in argv[1:]]))\n</code></pre>"},{"location":"python/django/#media-and-static","title":"MEDIA and STATIC","text":"settings.py <pre><code>STATIC_URL: str = '/static/'\nSTATIC_ROOT: str = BASE_DIR / 'staticfiles'\nSTATICFILES_DIRS: list[str] = [\n    BASE_DIR / 'static',\n]\nSTATICFILES_STORAGE: list[str] = 'whitenoise.storage.CompressedManifestStaticFilesStorage'\n</code></pre> urls.py <pre><code>urlpatterns += static(settings.MEDIA_URL, documemt_root=settings.MEDIA_ROOT)\nurlpatterns += static(settings.STATIC_URL, documemt_root=settings.STATIC_ROOT)\n</code></pre>"},{"location":"python/django/#custom-user","title":"Custom User","text":"models.py <pre><code>from django.contrib.auth.models import AbstractUser\nfrom django.db import models\n\n\n# Create your models here.\nclass User(AbstractUser):\n    first_name = models.CharField(max_length=150, blank=True)\n    last_name = models.CharField(max_length=150, blank=True)\n    email: object = models.EmailField(unique=True)\n\n\nclass ActivationAccountToken(models.Model):\n    value: object = models.CharField(max_length=128)\n    used: object = models.BooleanField(default=False, verbose_name='Usado?')\n    created: object = models.DateTimeField(auto_now_add=True)\n\n    class Meta:\n        verbose_name = 'Token de Ativa\u00e7\u00e3o'\n        verbose_name_plural = 'Tokens de Ativa\u00e7\u00e3o'\n\n    def __str__(self) -&gt; str:\n        return f'{self.value}'\n</code></pre> forms.py <pre><code>from django.contrib.auth import forms\n\nfrom .models import User\n\n\nclass UserChangeForm(forms.UserChangeForm):\n    class Meta(forms.UserChangeForm.Meta):\n        model = User\n\n\nclass UserCreationForm(forms.UserCreationForm):\n    class Meta(forms.UserCreationForm.Meta):\n        model = User\n</code></pre> admin.py <pre><code>from django.contrib import admin\nfrom django.contrib.auth import admin as auth_admin\n\nfrom .models import User, ActivationAccountToken\nfrom .forms import UserChangeForm, UserCreationForm\n\n\n# Register your models here.\n@admin.register(User)\nclass UserAdmin(auth_admin.UserAdmin):\n    add_fieldsets = (\n        (\n            None,\n            {\n                'classes': ('wide',),\n                'fields': (\n                    'username',\n                    'first_name',\n                    'last_name',\n                    'email',\n                    'password1',\n                    'password2',\n                ),\n            },\n        ),\n    )\n    form = UserChangeForm\n    add_form = UserCreationForm\n\n\nadmin.site.register(ActivationAccountToken)\n</code></pre> app/urls.py <pre><code>from django.urls import path, URLPattern\n\nfrom . import views\n\n\napp_name = 'account'\n\nurlpatterns: list[URLPattern] = [\n    path('registrar', views.register_view, name='register'),\n    path('ativar/&lt;uidb64&gt;/&lt;token&gt;', views.activate_account, name='activate'),\n    path('entrar', views.login_view, name='login'),\n    path('sair', views.logout_view, name='logout'),\n]\n</code></pre> views.py <pre><code>from django.shortcuts import get_object_or_404\nfrom django.utils.encoding import force_str\nfrom django.utils.http import urlsafe_base64_decode\nfrom django.urls import reverse\nfrom django.shortcuts import render\nfrom django.contrib.auth import authenticate, login, logout\nfrom django.contrib.auth.models import AbstractBaseUser\nfrom django.contrib.auth.decorators import login_required\nfrom django.http import HttpRequest, HttpResponse, HttpResponseRedirect, Http404\nfrom django.forms import Form, CharField, TextInput, EmailField, PasswordInput\nfrom django.contrib import messages\n\nfrom .models import User, ActivationAccountToken\nfrom mail.views import send_activate_account_token, send_activate_account_done\n\n\n# Create your views here.\nclass RegisterForm(Form):\n    username: object = CharField(\n        label='',\n        max_length=50,\n        required=True,\n        widget=TextInput(\n            attrs={\n                'placeholder': 'Username (nome de usu\u00e1rio)*',\n                'class': 'py-2',\n                'style': 'text-align: center;',\n                'autofocus': 'autofocus',\n            }\n        ),\n        help_text='50 caracteres ou menos. Letras, n\u00fameros e @/./+/-/_ apenas.',\n    )\n    first_name: object = CharField(\n        label='',\n        required=True,\n        widget=TextInput(\n            attrs={\n                'placeholder': 'Nome*',\n                'class': 'mt-3 py-2',\n                'style': 'text-align: center;',\n            }\n        ),\n    )\n    last_name: object = CharField(\n        label='',\n        required=True,\n        widget=TextInput(\n            attrs={\n                'placeholder': 'Sobrenome*',\n                'class': 'py-2',\n                'style': 'text-align: center;',\n            }\n        ),\n    )\n    email: object = EmailField(\n        label='',\n        required=True,\n        widget=TextInput(\n            attrs={\n                'placeholder': 'Email*',\n                'class': 'mt-3 py-2',\n                'style': 'text-align: center;',\n            }\n        ),\n    )\n    password: object = CharField(\n        label='',\n        required=True,\n        widget=PasswordInput(\n            attrs={\n                'placeholder': 'Senha*',\n                'class': 'mt-3 py-2',\n                'style': 'text-align: center;',\n            }\n        ),\n    )\n    password2: object = CharField(\n        label='',\n        required=True,\n        widget=PasswordInput(\n            attrs={\n                'placeholder': 'Confirma\u00e7\u00e3o de senha*',\n                'class': 'mb-5 py-2',\n                'style': 'text-align: center;',\n            }\n        ),\n    )\n\n\nclass LogInForm(Form):\n    username = CharField(\n        label='',\n        required=True,\n        widget=TextInput(\n            attrs={\n                'placeholder': 'Username*',\n                'class': 'py-2',\n                'style': 'text-align: center;',\n                'autofocus': 'autofocus',\n            }\n        ),\n    )\n    password: object = CharField(\n        label='',\n        required=True,\n        widget=PasswordInput(\n            attrs={\n                'placeholder': 'Pass*',\n                'class': 'mt-3 py-2',\n                'style': 'text-align: center;',\n            }\n        ),\n    )\n\n\ndef register_view(r: HttpRequest) -&gt; HttpResponse | HttpResponseRedirect:\n    if r.user.is_authenticated:\n        return HttpResponseRedirect(reverse('home:index'))\n\n    elif r.method == 'POST':\n        form: Form = RegisterForm(r.POST)\n\n        if form.is_valid():\n            password: str = form.cleaned_data.get('password')\n            password2: str = form.cleaned_data.get('password2')\n\n            if not password or not password2 or password != password2:\n                messages.error(r, 'Senhas n\u00e3o compat\u00edveis')\n                return render(r, 'account/register.html', {'form': form})\n\n            username: str = form.cleaned_data.get('username')\n            email: str = form.cleaned_data.get('email')\n\n            if (\n                User.objects.filter(username=username).exists()\n                or User.objects.filter(email=email).exists()\n            ):\n                messages.error(r, 'Username e/ou e-mail indispon\u00edvel')\n                return render(r, 'account/register.html', {'form': form})\n\n            first_name: str = form.cleaned_data.get('first_name')\n            last_name: str = form.cleaned_data.get('last_name')\n\n            user: User = User.objects.create_user(\n                username=username,\n                first_name=first_name,\n                last_name=last_name,\n                email=email,\n                password=password,\n                is_active=False,\n            )\n\n            send_activate_account_token(r.get_host(), user, password)\n\n            messages.success(\n                r, 'Conta criada. Acesse seu e-mail para ativar sua conta.'\n            )\n            return HttpResponseRedirect(reverse('account:login'))\n\n        return render(r, 'account/register.html', {'form': form})\n\n    form: Form = RegisterForm()\n    return render(r, 'account/register.html', {'form': form})\n\n\ndef activate_account(r: HttpRequest, uidb64: str, token: str) -&gt; HttpResponseRedirect:\n    token_obj: ActivationAccountToken = get_object_or_404(\n        ActivationAccountToken, value=token, used=False\n    )\n\n    user: User | None = None\n\n    try:\n        id: int = int(force_str(urlsafe_base64_decode(uidb64)))\n        user = get_object_or_404(User, pk=id)\n\n    except (TypeError, ValueError, OverflowError, User.DoesNotExist):\n        user = None\n\n    if user is not None:\n        user.is_active = True\n        user.save()\n\n        token_obj.used = True\n        token_obj.save()\n\n        login(r, user)\n\n        send_activate_account_done(str(user.email))\n\n        return HttpResponseRedirect(reverse('home:index'))\n\n    raise Http404()\n\n\ndef login_view(r: HttpRequest) -&gt; HttpResponse | HttpResponseRedirect:\n    if r.user.is_authenticated:\n        return HttpResponseRedirect(reverse('home:index'))\n\n    elif r.method == 'POST':\n        form: Form = LogInForm(r.POST)\n\n        if not form.is_valid():\n            return render(r, 'account/login.html', {'form': form})\n\n        username: str = str(form.cleaned_data.get('username')).strip()\n        password: str = str(form.cleaned_data.get('password')).strip()\n\n        user: AbstractBaseUser | None = authenticate(\n            username=username, password=password\n        )\n\n        if user is None:\n            messages.error(r, 'Username e/ou senha inv\u00e1lida')\n            return render(r, 'account/login.html', {'form': form})\n\n        login(r, user)\n        return HttpResponseRedirect(reverse('home:index'))\n\n    return render(r, 'account/login.html', {'form': LogInForm()})\n\n\n@login_required(login_url='/conta/entrar')\ndef logout_view(r: HttpRequest) -&gt; HttpResponse | HttpResponseRedirect:\n    if r.method == 'POST':\n        logout(r)\n        return HttpResponseRedirect(reverse('account:login'))\n\n    return render(r, 'account/logout.html')\n</code></pre> PROJECT/urls.py <pre><code>from django.contrib.auth.views import (\n    PasswordResetView,\n    PasswordResetDoneView,\n    PasswordResetConfirmView,\n    PasswordResetCompleteView,\n)\n\nurlpatterns += [\n    path('reset', PasswordResetView.as_view(template_name='account/password_reset.html'), name='password_reset',),\n    path('reset-enviado', PasswordResetDoneView.as_view(template_name='account/password_reset_done.html'), name='password_reset_done',),\n    path('reset/&lt;uidb64&gt;/&lt;token&gt;', PasswordResetConfirmView.as_view(template_name='account/password_reset_confirm.html' ), name='password_reset_confirm',),\n    path('reset-concluido', PasswordResetCompleteView.as_view(template_name='account/password_reset_complete.html' ), name='password_reset_complete',),\n]\n</code></pre> Reset password HTML snippet HTML<pre><code>&lt;form method=\"post\" autocomplete=\"off\"&gt;\n    {% csrf_token %}\n\n    &lt;h1&gt;Redefinir Senha&lt;/h1&gt;\n    &lt;h6&gt;Lorem ipsum dolor sit amet&lt;/h6&gt;\n\n    &lt;br&gt;\n\n    {{ form|crispy }}\n\n    &lt;form method=\"post\" autocomplete=\"off\"&gt;\n    {% csrf_token %}\n\n    &lt;h1&gt;Redefinir Senha&lt;/h1&gt;\n    &lt;h6&gt;Certifique-se de inserir a mesma senha nos dois campos&lt;/h6&gt;\n\n    &lt;br&gt;\n\n    {{ form|crispy }}\n\n    {% if messages %}\n    {% for message in messages %}\n    &lt;div class='alert {{ message.tags }} mt-3 py-2' role='alert'&gt;{{ message }}&lt;/div&gt;\n    {% endfor %}\n    {% endif %}\n\n    &lt;div&gt;\n        &lt;input id=\"confirm-btn\" class=\"btn btn-primary mt-4\" type=\"submit\" value=\"Enviar e-mail\"&gt;\n    &lt;/div&gt;\n\n&lt;/form&gt;{% endif %}\n\n    &lt;div&gt;\n        &lt;input id=\"confirm-btn\" class=\"btn btn-primary mt-4\" type=\"submit\" value=\"Enviar e-mail\"&gt;\n    &lt;/div&gt;\n\n&lt;/form&gt;\n</code></pre> settings.py <pre><code># User Model\nAUTH_USER_MODEL: str = 'account.User'\nLOGOUT_REDIRECT_URL: str = 'conta/entrar'\n</code></pre>"},{"location":"python/django/#e-mail","title":"E-mail","text":"settings.py <pre><code># E-mail configs\nEMAIL_BACKEND: str = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST: str = 'smtp.gmail.com'\nEMAIL_PORT: int = 587\nEMAIL_USE_TLS: bool = True\nEMAIL_HOST_USER: str = str(environ.get('EMAIL_HOST_USER'))\nEMAIL_HOST_PASSWORD: str = str(environ.get('EMAIL_HOST_PASSWORD'))\n</code></pre> views.py <pre><code>from typing import Final\nfrom hashlib import sha256\n\nfrom django.urls import reverse\nfrom django.utils.encoding import force_bytes\nfrom django.utils.http import urlsafe_base64_encode\nfrom django.http import HttpRequest, HttpResponseRedirect\nfrom django.core.mail import EmailMessage\nfrom django.conf import settings\nfrom django.contrib import messages\n\nfrom &lt;user_app&gt;.models import User, ActivationAccountToken\nfrom secret.models import Card, LoginCredential, SecurityNote\n\n\n# Create your views here.\nACTIVATE_ACCOUNT_TOKEN_SEND: Final = \"\"\"\nSua conta foi criada com sucesso, contudo, voc\u00ea deve ativ\u00e1-la. Para fazer isso, clique no link abaixo:\n\n{domain}/conta/ativar/{uidb64}/{token}\n\n\nEquipe Lipsum\n\"\"\"\n\nACTIVATE_ACCOUNT_CONFIRM_DONE: Final = \"\"\"\nA partir de agora a sua conta est\u00e1 ativa e voc\u00ea pode utilizar dos recursos do sistema para armazenar seus dados sens\u00edveis.\n\n\nEquipe Lipsum\n\"\"\"\n\n\ndef export_secrets(r: HttpRequest, secret_type: str) -&gt; HttpResponseRedirect:\n    csvfile: StringIO = StringIO()\n    csvwriter = writer(csvfile, delimiter='\u00ac', doublequote=True)\n\n    email: EmailMessage = EmailMessage(\n        subject='Exporta\u00e7\u00e3o de Segredos | Lipsum',\n        body=f'Aqui est\u00e3o seus segredos armazenados em \"{secret_type}\" no Lipsum.\\n\\n\\nEquipe Lipsum',\n        from_email=settings.EMAIL_HOST_USER,\n        to=[r.user.email],\n    )\n\n    if secret_type == 'Credenciais':\n        if not LoginCredential.objects.filter(owner=r.user).exists():\n            messages.error(r, 'N\u00e3o h\u00e1 credenciais para exportar.')\n            return HttpResponseRedirect(reverse('secret:credential_list_view'))\n\n        csvwriter.writerow(\n            ['Servi\u00e7o', 'Apelido', 'Login 3rd', 'Apelido Login 3rd', 'Login', 'Senha']\n        )\n\n        for i in LoginCredential.objects.filter(owner=r.user):\n            csvwriter.writerow(\n                [\n                    i.get_service_display(),\n                    i.name,\n                    i.thirdy_party_login,\n                    i.thirdy_party_login_name,\n                    i.login,\n                    i.password,\n                ]\n            )\n\n        email.attach('credenciais.csv', csvfile.getvalue(), 'text/csv')\n        email.send()\n\n        messages.success(r, 'Credenciais exportadas com sucesso.')\n        return HttpResponseRedirect(reverse('secret:credential_list_view'))\n\n    elif secret_type == 'Cart\u00f5es':\n        if not Card.objects.filter(owner=r.user).exists():\n            messages.error(r, 'N\u00e3o h\u00e1 cart\u00f5es para exportar.')\n            return HttpResponseRedirect(reverse('secret:card_list_view'))\n\n        csvwriter.writerow(\n            [\n                'Apelido',\n                'Tipo',\n                'N\u00famero',\n                'Expira\u00e7\u00e3o',\n                'CVV',\n                'Banco',\n                'Bandeira',\n                'Titular',\n            ]\n        )\n\n        for i in Card.objects.filter(owner=r.user):\n            csvwriter.writerow(\n                [\n                    i.name,\n                    i.get_card_type_display(),\n                    i.number,\n                    i.expiration,\n                    i.cvv,\n                    i.get_bank_display(),\n                    i.get_brand_display(),\n                    i.owners_name,\n                ]\n            )\n\n        email.attach('cartoes.csv', csvfile.getvalue(), 'text/csv')\n        email.send()\n\n        messages.success(r, 'Cart\u00f5es exportados com sucesso.')\n        return HttpResponseRedirect(reverse('secret:card_list_view'))\n\n    elif secret_type == 'Anota\u00e7\u00f5es':\n        if not SecurityNote.objects.filter(owner=r.user).exists():\n            messages.error(r, 'N\u00e3o h\u00e1 anota\u00e7\u00f5es para exportar.')\n            return HttpResponseRedirect(reverse('secret:note_list_view'))\n\n        csvwriter.writerow(['T\u00edtulo', 'Conte\u00fado'])\n\n        for i in SecurityNote.objects.filter(owner=r.user):\n            csvwriter.writerow([i.title, i.content])\n\n        email.attach('anotacoes.csv', csvfile.getvalue(), 'text/csv')\n        email.send()\n\n        messages.success(r, 'Anota\u00e7\u00f5es exportadas com sucesso.')\n        return HttpResponseRedirect(reverse('secret:note_list_view'))\n\n    else:\n        return HttpResponseRedirect(reverse('home:index'))\n\n\ndef send_activate_account_token(domain: str, user: User, password: str) -&gt; None:\n    token_hash = sha256(f'{user.username}{password}'.encode()).hexdigest()\n    uidb64 = urlsafe_base64_encode(force_bytes(user.pk))\n\n    ActivationAccountToken.objects.create(value=token_hash, used=False)\n\n    email: EmailMessage = EmailMessage(\n        subject='Ativa\u00e7\u00e3o de Conta | Lipsum',\n        body=ACTIVATE_ACCOUNT_TOKEN_SEND.format(\n            domain=domain, uidb64=uidb64, token=token_hash\n        ),\n        from_email=settings.EMAIL_HOST_USER,\n        to=[str(user.email)],\n    )\n    email.send()\n\n\ndef send_activate_account_done(user_email: str) -&gt; None:\n    email: EmailMessage = EmailMessage(\n        subject='Ativa\u00e7\u00e3o de Conta | Lipsum',\n        body=ACTIVATE_ACCOUNT_CONFIRM_DONE,\n        from_email=settings.EMAIL_HOST_USER,\n        to=[user_email],\n    )\n    email.send()\n</code></pre>"},{"location":"python/django/#messages","title":"Messages","text":"settings.py <pre><code>from django.contrib.messages import constants as messages\n\n\n# Messages configs\nMESSAGE_TAGS: dict[int, str] = {\n    messages.DEBUG: 'alert-primary',\n    messages.ERROR: 'alert-danger',\n    messages.INFO: 'alert-info',\n    messages.SUCCESS: 'alert-success',\n    messages.WARNING: 'alert-warning',\n}\n</code></pre> Usage <code>.py</code> and <code>.html</code> <pre><code>from django.contrib import messages\n\n\nmessages.debug(r, 'Message content')\nmessages.error(r, 'Message content')\nmessages.info(r, 'Message content')\nmessages.success(r, 'Message content')\nmessages.warning(r, 'Message content')\n</code></pre> <pre><code>{% if messages %}\n    {% for message in messages %}\n        &lt;div class='alert {{ message.tags }} mt-3 py-2' role='alert'&gt;{{ message }}&lt;/div&gt;\n    {% endfor %}\n{% endif %}\n</code></pre>"},{"location":"python/django/#db-integration","title":"DB Integration","text":"settings.py <pre><code>DATABASES: dict[str, dict[str, str | None]] = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': environ.get('DATABASE_NAME'),\n        'USER': environ.get('DATABASE_USER'),\n        'PASSWORD': environ.get('DATABASE_PASSWORD'),\n        'HOST': environ.get('DATABASE_HOST'),\n        'PORT': '5432',\n    }\n}\n</code></pre>"},{"location":"python/django/#deploy","title":"Deploy","text":"deploy.py <pre><code>from os import environ as env\n\n\nDATABASES: dict[str, dict[str, str | None]] = {\n    # 'default': URL\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': env.get('DATABASE_NAME'),\n        'USER': env.get('DATABASE_USER'),\n        'PASSWORD': env.get('DATABASE_PASSWORD'),\n        'HOST': env.get('DATABASE_HOST'),\n        'PORT': '5432',\n    }\n}\n\nDEBUG: bool = False\nSECRET_KEY: str | None = env.get('SECRET_KEY')\nALLOWED_HOSTS: list[str] = str(env.get('ALLOWED_HOSTS')).split()\n\n\n# http -&gt; https redirect\nSECURE_PROXY_SSL_HEADER: tuple[str, str] = ('HTTP_X_FORWARDED_PROTO', 'https')\nSECURE_SSL_REDIRECT: bool = True\n</code></pre> Dockerfile <pre><code>FROM python:latest\n\nWORKDIR /code\n\nCOPY ${PROJECT_NAME}/requirements.txt /code/\n\nRUN pip install -r requirements.txt\n\nCOPY /${PROJECT_NAME} /code/\n</code></pre> docker-compose.yml <pre><code>services:\n  web:\n    build: .\n    command: &gt;\n      bash -c \"\n      python manage.py collectstatic --noinput\n      &amp;&amp; python manage.py makemigrations\n      &amp;&amp; python manage.py migrate\n      &amp;&amp; gunicorn CORE.wsgi:application --bind 0.0.0.0:8000\"\n    ports:\n      - \"8000:8000\"\n    environment:\n      - DJANGO_SETTINGS_MODULE=CORE.settings.dev\n      - DATABASE_NAME=postgres\n      - DATABASE_USER=postgres\n      - DATABASE_PASSWORD=postgres\n      - DATABASE_HOST=db\n    depends_on:\n      db:\n        condition: service_healthy\n        restart: true\n    restart: on-failure\n\n  db:\n    image: postgres\n    environment:\n      - POSTGRES_DB=postgres\n      - POSTGRES_USER=postgres\n      - POSTGRES_PASSWORD=postgres\n    ports:\n      - \"5432:5432\"\n    healthcheck:\n      test: pg_isready -U postgres\n</code></pre> docker-compose-dev.yml <pre><code># docker stop $(docker ps -a -q); docker rm $(docker ps -a -q); docker rmi $(docker images -a -q)\n# docker compose -f docker-compose-dev.yml up\n\nservices:\n  web:\n    build: .\n    command: &gt;\n      bash -c \"\n      pip install tqdm tblib\n      &amp;&amp; python manage.py collectstatic --noinput\n      &amp;&amp; python manage.py makemigrations\n      &amp;&amp; python manage.py migrate\n      &amp;&amp; python manage.py populateuser\n      &amp;&amp; python manage.py populatesecret\n      &amp;&amp; gunicorn CORE.wsgi:application --bind 0.0.0.0:8000\"\n    ports:\n      - \"8000:8000\"\n    environment:\n      - DJANGO_SETTINGS_MODULE=CORE.settings.dev\n      - DATABASE_NAME=postgres\n      - DATABASE_USER=postgres\n      - DATABASE_PASSWORD=postgres\n      - DATABASE_HOST=db\n    depends_on:\n      db:\n        condition: service_healthy\n        restart: true\n    restart: on-failure\n    deploy:\n      resources:\n        limits:\n          cpus: \"0.5\"\n          memory: \"64.0MB\"\n\n  db:\n    image: postgres\n    environment:\n      - POSTGRES_DB=postgres\n      - POSTGRES_USER=postgres\n      - POSTGRES_PASSWORD=postgres\n    ports:\n      - \"5432:5432\"\n    healthcheck:\n      test: pg_isready -U postgres\n    deploy:\n      resources:\n        limits:\n          cpus: \"0.5\"\n          memory: \"64.0MB\"\n</code></pre> docker-compose-unittest.yml <pre><code># docker stop $(docker ps -a -q); docker rm $(docker ps -a -q); docker rmi $(docker images -a -q)\n# docker compose -f docker-compose-unittest.yml up\n\nservices:\n  web:\n    build: .\n    command: &gt;\n      bash -c \"\n      pip install tqdm tblib\n      &amp;&amp; python manage.py collectstatic --noinput\n      &amp;&amp; python manage.py makemigrations\n      &amp;&amp; python manage.py migrate\n      &amp;&amp; python manage.py test\n      &amp;&amp; gunicorn CORE.wsgi:application --bind 0.0.0.0:8000\"\n    ports:\n      - \"8000:8000\"\n    environment:\n      - DJANGO_SETTINGS_MODULE=CORE.settings.dev\n      - DATABASE_NAME=postgres\n      - DATABASE_USER=postgres\n      - DATABASE_PASSWORD=postgres\n      - DATABASE_HOST=db\n      - CAPTCHA_TEST_MODE=True\n    depends_on:\n      db:\n        condition: service_healthy\n        restart: true\n    restart: on-failure\n    deploy:\n      resources:\n        limits:\n          cpus: \"0.5\"\n          memory: \"64.0MB\"\n\n  db:\n    image: postgres\n    environment:\n      - POSTGRES_DB=postgres\n      - POSTGRES_USER=postgres\n      - POSTGRES_PASSWORD=postgres\n    ports:\n      - \"5432:5432\"\n    healthcheck:\n      test: pg_isready -U postgres\n    deploy:\n      resources:\n        limits:\n          cpus: \"0.5\"\n          memory: \"64.0MB\"\n</code></pre> docker-compose-load.yml <pre><code># docker stop $(docker ps -a -q); docker rm $(docker ps -a -q); docker rmi $(docker images -a -q)\n# docker compose -f docker-compose-load.yml up\n\nservices:\n  web:\n    build: .\n    command: &gt;\n      bash -c \"\n      python manage.py collectstatic --noinput\n      &amp;&amp; python manage.py makemigrations\n      &amp;&amp; python manage.py migrate\n      &amp;&amp; gunicorn CORE.wsgi:application --bind 0.0.0.0:8000\"\n    ports:\n      - \"8000:8000\"\n    environment:\n      - DJANGO_SETTINGS_MODULE=CORE.settings.dev\n      - DATABASE_NAME=postgres\n      - DATABASE_USER=postgres\n      - DATABASE_PASSWORD=postgres\n      - DATABASE_HOST=db\n    depends_on:\n      db:\n        condition: service_healthy\n        restart: true\n    restart: on-failure\n    deploy:\n      resources:\n        limits:\n          cpus: \"0.5\"\n          memory: \"64.0MB\"\n\n  db:\n    image: postgres\n    environment:\n      - POSTGRES_DB=postgres\n      - POSTGRES_USER=postgres\n      - POSTGRES_PASSWORD=postgres\n    ports:\n      - \"5432:5432\"\n    healthcheck:\n      test: pg_isready -U postgres\n    deploy:\n      resources:\n        limits:\n          cpus: \"0.5\"\n          memory: \"64.0MB\"\n</code></pre>"},{"location":"python/django/#custom-err-pages","title":"Custom err pages","text":"PROJECT/urls.py <pre><code>handler403: str = '&lt;err_app&gt;.views.handle403'\nhandler404: str = '&lt;err_app&gt;.views.handle404'\nhandler500: str = '&lt;err_app&gt;.views.handle500'\n</code></pre> app/views.py <pre><code>from typing import Any\n\nfrom django.shortcuts import render\nfrom django.http import HttpRequest, HttpResponse\n\n\n# Create your views here.\ndef handle&lt;code: int&gt;(r: HttpRequest, *args: Any, **kwargs: Any) -&gt; HttpResponse:\n    return render(\n        r,\n        'err/error_template.html',\n        {...}\n    )\n</code></pre>"},{"location":"python/django/#security","title":"Security","text":"settings.py <pre><code># Extra security\nSESSION_COOKIE_SECURE: bool = True\nCSRF_COOKIE_SECURE: bool = True\n</code></pre>"},{"location":"python/django/#load-tests","title":"Load Tests","text":"utils.py <pre><code>def handle_duration(duration: str, total: int) -&gt; list[int]:\n    new_duration = 0\n\n    if 's' in duration:\n        new_duration = int(duration[:-1])\n\n    elif 'm' in duration:\n        if duration.endswith('m'):\n            new_duration = int(duration[:-1]) * 60\n        else:\n            m, s = duration.split('m')\n            new_duration = (int(m) * 60) + int(s)\n\n    elif 'h' in duration:\n        if duration.endswith('h'):\n            new_duration = int(duration[:-1]) * 3600\n        else:\n            h, m = duration.split('h')\n            new_duration = (int(h) * 3600) + (int(m) * 60)\n\n    return [new_duration + total] * 2\n\n\ndef handle_stages(stages) -&gt; list[dict[str, int | float]]:\n    output = []\n    total = 0\n\n    for stage in stages:\n        new_duration, total = handle_duration(stage['duration'], total)\n\n        output.append(\n            {\n                'duration': new_duration,\n                'users': stage['users'],\n                'spawn_rate': stage['spawn_rate'],\n            }\n        )\n\n    return output\n</code></pre> load_test.py <pre><code>\"\"\"\nlocust --headless -f loadtests/load_test.py -H http://localhost:8000 --processes -1 --csv report/csv/load/load --html report/html/load.html\n\"\"\"\n\nfrom locust import FastHttpUser, LoadTestShape, TaskSet, constant, task, stats\n\nfrom utils import handle_stages\n\n\nstats.PERCENTILES_TO_STATISTICS = [0.5, 0.75, 0.80, 0.90, 0.95, 0.99]\nstats.MODERN_UI_PERCENTILES_TO_CHART = [0.5, 0.75, 0.80, 0.90, 0.95, 0.99]\n\n\nclass UserTasks(TaskSet):\n    @task\n    def get_root(self) -&gt; None:\n        self.client.get('/')\n\n\nclass WebsiteUser(FastHttpUser):\n    wait_time = constant(0.5)\n    tasks = [UserTasks]\n\n\nclass LoadTest(LoadTestShape):\n    stages = [\n        {'duration': '5m', 'users': 250, 'spawn_rate': 5 / 6},\n        {'duration': '10m', 'users': 250, 'spawn_rate': 5 / 6},\n        {'duration': '5m', 'users': 0, 'spawn_rate': 5 / 6},\n    ]\n\n    def tick(self) -&gt; tuple | None:\n        run_time = self.get_run_time()\n\n        stages = handle_stages(self.stages.copy())\n\n        for stage in stages:\n            if run_time &lt; stage['duration']:\n                tick_data = (stage['users'], stage['spawn_rate'])\n                return tick_data\n\n        return None\n</code></pre> soak_test.py <pre><code>\"\"\"\nlocust --headless -f loadtests/soak_test.py -H http://localhost:8000 --processes -1 --csv report/csv/soak/soak --html report/html/soak.html\n\"\"\"\n\nfrom locust import FastHttpUser, LoadTestShape, TaskSet, constant, task, stats\n\nfrom utils import handle_stages\n\n\nstats.PERCENTILES_TO_STATISTICS = [0.5, 0.75, 0.80, 0.90, 0.95, 0.99]\nstats.MODERN_UI_PERCENTILES_TO_CHART = [0.5, 0.75, 0.80, 0.90, 0.95, 0.99]\n\n\nclass UserTasks(TaskSet):\n    @task\n    def get_root(self) -&gt; None:\n        self.client.get('/')\n\n\nclass WebsiteUser(FastHttpUser):\n    wait_time = constant(0.5)\n    tasks = [UserTasks]\n\n\nclass SoakTest(LoadTestShape):\n    stages = [\n        {'duration': '2m', 'users': 250, 'spawn_rate': 25 / 12},\n        {'duration': '5h40', 'users': 250, 'spawn_rate': 25 / 12},\n        {'duration': '2m', 'users': 0, 'spawn_rate': 25 / 12},\n    ]\n\n    def tick(self) -&gt; tuple | None:\n        run_time = self.get_run_time()\n\n        stages = handle_stages(self.stages.copy())\n\n        for stage in stages:\n            if run_time &lt; stage['duration']:\n                tick_data = (stage['users'], stage['spawn_rate'])\n                return tick_data\n\n        return None\n</code></pre> spike_test.py <pre><code>\"\"\"\nlocust --headless -f loadtests/spike_test.py -H http://localhost:8000 --processes -1 --csv report/csv/spike/spike --html report/html/spike.html\n\"\"\"\n\nfrom locust import FastHttpUser, LoadTestShape, TaskSet, constant, task, stats\n\nfrom utils import handle_stages\n\n\nstats.PERCENTILES_TO_STATISTICS = [0.5, 0.75, 0.80, 0.90, 0.95, 0.99]\nstats.MODERN_UI_PERCENTILES_TO_CHART = [0.5, 0.75, 0.80, 0.90, 0.95, 0.99]\n\n\nclass UserTasks(TaskSet):\n    @task\n    def get_root(self) -&gt; None:\n        self.client.get('/')\n\n\nclass WebsiteUser(FastHttpUser):\n    wait_time = constant(0.5)\n    tasks = [UserTasks]\n\n\nclass SpikeTest(LoadTestShape):\n    stages = [\n        {'duration': '10s', 'users': 100, 'spawn_rate': 10},\n        {'duration': '1m', 'users': 100, 'spawn_rate': 10},\n        {'duration': '10s', 'users': 1500, 'spawn_rate': 140},\n        {'duration': '5m', 'users': 1500, 'spawn_rate': 140},\n        {'duration': '10s', 'users': 100, 'spawn_rate': 140},\n        {'duration': '15m', 'users': 100, 'spawn_rate': 10},\n        {'duration': '10s', 'users': 0, 'spawn_rate': 1},\n    ]\n\n    def tick(self) -&gt; tuple | None:\n        run_time = self.get_run_time()\n\n        stages = handle_stages(self.stages.copy())\n\n        for stage in stages:\n            if run_time &lt; stage['duration']:\n                tick_data = (stage['users'], stage['spawn_rate'])\n                return tick_data\n\n        return None\n</code></pre> stress_test.py <pre><code>\"\"\"\nlocust --headless -f loadtests/stress_test.py -H http://localhost:8000 --processes -1 --csv report/csv/stress/stress --html report/html/stress.html\n\"\"\"\n\nfrom locust import FastHttpUser, LoadTestShape, TaskSet, constant, task, stats\n\nfrom utils import handle_stages\n\n\nstats.PERCENTILES_TO_STATISTICS = [0.5, 0.75, 0.80, 0.90, 0.95, 0.99]\nstats.MODERN_UI_PERCENTILES_TO_CHART = [0.5, 0.75, 0.80, 0.90, 0.95, 0.99]\n\n\nclass UserTasks(TaskSet):\n    @task\n    def get_root(self) -&gt; None:\n        self.client.get('/')\n\n\nclass WebsiteUser(FastHttpUser):\n    wait_time = constant(0.5)\n    tasks = [UserTasks]\n\n\nclass StressTest(LoadTestShape):\n    stages = [\n        {'duration': '2m', 'users': 150, 'spawn_rate': 21 / 5},\n        {'duration': '5m', 'users': 150, 'spawn_rate': 21 / 5},\n        {'duration': '2m', 'users': 200, 'spawn_rate': 21 / 5},\n        {'duration': '5m', 'users': 200, 'spawn_rate': 21 / 5},\n        {'duration': '2m', 'users': 250, 'spawn_rate': 21 / 5},\n        {'duration': '5m', 'users': 250, 'spawn_rate': 21 / 5},\n        {'duration': '2m', 'users': 300, 'spawn_rate': 21 / 5},\n        {'duration': '5m', 'users': 300, 'spawn_rate': 21 / 5},\n        {'duration': '10m', 'users': 0, 'spawn_rate': 5},\n    ]\n\n    def tick(self) -&gt; tuple | None:\n        run_time = self.get_run_time()\n\n        stages = handle_stages(self.stages.copy())\n\n        for stage in stages:\n            if run_time &lt; stage['duration']:\n                tick_data = (stage['users'], stage['spawn_rate'])\n                return tick_data\n\n        return None\n</code></pre>"},{"location":"python/django/#github-workflows","title":"GitHub Workflows","text":"code_analysis.yml <pre><code>name: CodeQL Analysis\n\non: [push, fork, pull_request]\n\njobs:\n  analyze:\n    name: Analyze (${{ matrix.language }})\n    runs-on: ${{ (matrix.language == 'swift' &amp;&amp; 'macos-latest') || 'ubuntu-latest' }}\n    timeout-minutes: ${{ (matrix.language == 'swift' &amp;&amp; 120) || 360 }}\n    permissions:\n      security-events: write\n      actions: read\n      contents: read\n\n    strategy:\n      fail-fast: false\n      matrix:\n        include:\n          - language: python\n            build-mode: default\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v3\n        with:\n          languages: ${{ matrix.language }}\n\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v3\n        with:\n          category: \"/language:${{matrix.language}}\"\n</code></pre> loadtest.yml <pre><code>name: Django Load Testing\n\non: [push, fork, pull_request]\n\nenv:\n  SECRET_KEY: ${{ secrets.SECRET_KEY }}\n  ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}\n  DJANGO_SETTINGS_MODULE: ${{ secrets.DJANGO_SETTINGS_MODULE }}\n  EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}\n  EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}\n\njobs:\n  loadtest:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Install Docker Compose\n        run: |\n          sudo apt-get update\n          sudo apt-get install -y docker-compose\n\n      - name: Install Python and Pip\n        uses: actions/setup-python@v3\n        with:\n          python-version: \"3.12\"\n\n      - name: Install Locust\n        run: |\n          pip install --upgrade pip\n          pip install locust\n\n      - name: Checkout Repository\n        uses: actions/checkout@v3\n\n      - name: Build and Run Docker Compose\n        run: |\n          docker compose -f docker-compose-load.yml up -d\n\n      - name: Run Locust\n        continue-on-error: true\n        if: always()\n        run: |\n          python -c \"import time; time.sleep(180)\"\n          locust --headless -f loadtests/load_test.py -H http://localhost:8000 --processes -1 --csv report/csv/load/load --html report/html/load.html\n\n      - name: Upload Locust Report\n        if: always()\n        uses: actions/upload-artifact@v3\n        with:\n          name: loadtest-result\n          path: report/html/load.html\n</code></pre> soaktest.yml <pre><code>name: Django Soak Testing\n\non: [push, fork, pull_request]\n\nenv:\n  SECRET_KEY: ${{ secrets.SECRET_KEY }}\n  ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}\n  DJANGO_SETTINGS_MODULE: ${{ secrets.DJANGO_SETTINGS_MODULE }}\n  EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}\n  EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}\n\njobs:\n  loadtest:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Install Docker Compose\n        run: |\n          sudo apt-get update\n          sudo apt-get install -y docker-compose\n\n      - name: Install Python and Pip\n        uses: actions/setup-python@v3\n        with:\n          python-version: \"3.12\"\n\n      - name: Install Locust\n        run: |\n          pip install --upgrade pip\n          pip install locust\n\n      - name: Checkout Repository\n        uses: actions/checkout@v3\n\n      - name: Build and Run Docker Compose\n        run: |\n          docker compose -f docker-compose-load.yml up -d\n\n      - name: Run Locust\n        continue-on-error: true\n        if: always()\n        run: |\n          python -c \"import time; time.sleep(180)\"\n          locust --headless -f loadtests/soak_test.py -H http://localhost:8000 --processes -1 --csv report/csv/soak/soak --html report/html/soak.html\n\n      - name: Upload Locust Report\n        if: always()\n        uses: actions/upload-artifact@v3\n        with:\n          name: soaktest-result\n          path: report/html/soak.html\n</code></pre> spiketest.yml <pre><code>name: Django Spike Testing\n\non: [push, fork, pull_request]\n\nenv:\n  SECRET_KEY: ${{ secrets.SECRET_KEY }}\n  ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}\n  DJANGO_SETTINGS_MODULE: ${{ secrets.DJANGO_SETTINGS_MODULE }}\n  EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}\n  EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}\n\njobs:\n  loadtest:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Install Docker Compose\n        run: |\n          sudo apt-get update\n          sudo apt-get install -y docker-compose\n\n      - name: Install Python and Pip\n        uses: actions/setup-python@v3\n        with:\n          python-version: \"3.12\"\n\n      - name: Install Locust\n        run: |\n          pip install --upgrade pip\n          pip install locust\n\n      - name: Checkout Repository\n        uses: actions/checkout@v3\n\n      - name: Build and Run Docker Compose\n        run: |\n          docker compose -f docker-compose-load.yml up -d\n\n      - name: Run Locust\n        continue-on-error: true\n        if: always()\n        run: |\n          python -c \"import time; time.sleep(180)\"\n          locust --headless -f loadtests/spike_test.py -H http://localhost:8000 --processes -1 --csv report/csv/spike/spike --html report/html/spike.html\n\n      - name: Upload Locust Report\n        if: always()\n        uses: actions/upload-artifact@v3\n        with:\n          name: spiketest-result\n          path: report/html/spike.html\n</code></pre> stresstest.yml <pre><code>name: Django Stress Testing\n\non: [push, fork, pull_request]\n\nenv:\n  SECRET_KEY: ${{ secrets.SECRET_KEY }}\n  ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}\n  DJANGO_SETTINGS_MODULE: ${{ secrets.DJANGO_SETTINGS_MODULE }}\n  EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}\n  EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}\n\njobs:\n  loadtest:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Install Docker Compose\n        run: |\n          sudo apt-get update\n          sudo apt-get install -y docker-compose\n\n      - name: Install Python and Pip\n        uses: actions/setup-python@v3\n        with:\n          python-version: \"3.12\"\n\n      - name: Install Locust\n        run: |\n          pip install --upgrade pip\n          pip install locust\n\n      - name: Checkout Repository\n        uses: actions/checkout@v3\n\n      - name: Build and Run Docker Compose\n        run: |\n          docker compose -f docker-compose-load.yml up -d\n\n      - name: Run Locust\n        continue-on-error: true\n        if: always()\n        run: |\n          python -c \"import time; time.sleep(180)\"\n          locust --headless -f loadtests/stress_test.py -H http://localhost:8000 --processes -1 --csv report/csv/stress/stress --html report/html/stress.html\n\n      - name: Upload Locust Report\n        if: always()\n        uses: actions/upload-artifact@v3\n        with:\n          name: stresstest-result\n          path: report/html/stress.html\n</code></pre> unittest.yml <pre><code>name: Django Unit Testing\n\non: [push, fork, pull_request]\n\nenv:\n  SECRET_KEY: ${{ secrets.SECRET_KEY }}\n  ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}\n  DJANGO_SETTINGS_MODULE: ${{ secrets.DJANGO_SETTINGS_MODULE }}\n  EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}\n  EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}\n  CAPTCHA_TEST_MODE: True\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      max-parallel: 4\n      matrix:\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n\n    steps:\n      - uses: actions/checkout@v3\n      - name: Set up Python ${{ matrix.python-version }}\n        uses: actions/setup-python@v3\n        with:\n          python-version: ${{ matrix.python-version }}\n\n      - name: Install Dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r ${PROJECT_NAME^^}/requirements.txt\n\n      - name: Install Docker\n        run: |\n          sudo apt-get update\n          sudo apt-get install -y docker\n\n      - name: Set and Migrate DB\n        run: |\n          docker run --name psql_${PROJECT_NAME^^} -p 5432:5432 -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=postgres -e POSTGRES_DB=postgres -d postgres\n          python -c \"import time; time.sleep(10)\"\n          python ${PROJECT_NAME^^}/manage.py makemigrations\n          python ${PROJECT_NAME^^}/manage.py migrate\n\n      - name: Collect Staticfiles\n        run: |\n          python ${PROJECT_NAME^^}/manage.py collectstatic --noinput\n\n      - name: Run Tests\n        run: |\n          cd ${PROJECT_NAME^^}\n          python manage.py test --parallel\n</code></pre>"},{"location":"python/selenium/","title":"Selenium","text":""},{"location":"python/selenium/#webdriver","title":"WebDriver","text":"Default <pre><code>from selenium.webdriver import Firefox, FirefoxOptions\nfrom selenium.webdriver.remote.webelement import WebElement\n\n\noptions: FirefoxOptions = FirefoxOptions()\noptions.add_argument(\"--headless\")\noptions.add_argument(\"--window-size=1920,1080\")\n\ndriver: Firefox = Firefox(options=options)\ndriver.implicitly_wait(30)\n</code></pre> OOP with <code>unittest</code> <pre><code>import unittest\nfrom selenium.webdriver import Firefox, FirefoxOptions\nfrom selenium.webdriver.remote.webelement import WebElement\n\n\nclass BaseTestCase(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls, new: bool = False) -&gt; None:\n        if new:\n            options: FirefoxOptions = FirefoxOptions()\n            options.add_argument(\"--headless\")\n            options.add_argument(\"--window-size=1920,1080\")\n\n            cls.driver: Firefox = Firefox(options=options)\n            cls.driver.implicitly_wait(30)\n\n    @classmethod\n    def tearDownClass(cls) -&gt; None:\n        cls.driver.quit()\n\n    @classmethod\n    def firefox_scroll(cls, e: WebElement):\n        x = e.location[\"x\"]\n        y = e.location[\"y\"]\n        scroll_by_coord = f\"window.scrollTo({x}, {y});\"\n        scroll_nav_out_of_way = \"window.scrollBy(0, -120);\"\n        cls.driver.execute_script(scroll_by_coord)\n        cls.driver.execute_script(scroll_nav_out_of_way)\n</code></pre>"},{"location":"sh/","title":"sh","text":"<ul> <li>Start Projects</li> </ul>"},{"location":"sh/start/","title":"Start Project","text":""},{"location":"sh/start/#expo-go","title":"Expo Go","text":"expo_start.sh <pre><code>echo \"\n ____  _  _  ____   __        ____  ____  __   ____  ____    ____  _  _ \n(  __)( \\/ )(  _ \\ /  \\      / ___)(_  _)/ _\\ (  _ \\(_  _)  / ___)/ )( \\\\\n ) _)  )  (  ) __/(  O )____ \\___ \\  )( /    \\ )   /  )(  _ \\___ \\) __ (\n(____)(_/\\_)(__)   \\__/(____)(____/ (__)\\_/\\_/(__\\_) (__)(_)(____/\\_)(_/\n\"\n\nprintf \"Write your app's name: \"\nread APP_NAME\n\nnpx create-expo-app $APP_NAME -t expo-template-blank-typescript\n\ncd $APP_NAME\n\nmkdir src src/screens src/components\nmkdir src/components/buttons src/components/texts src/components/icons\n\nnpm i nativewind\nnpm i tailwindcss@3.3.2 --save-dev\nnpm i @react-navigation/native-stack\nnpx tailwind init\n\n\necho \"import { Text } from \\\"react-native\\\";\n\nfunction Paragraph(props: any) {\n  return (\n    &lt;Text className=\\\"text-secondary text-justify text-lg mb-4\\\"&gt;\n      {props.children}\n    &lt;/Text&gt;\n  );\n}\n\nexport { Paragraph };\" &gt; src/components/texts/Paragraph.tsx\n\n\necho \"import { Text } from \\\"react-native\\\";\n\ninterface SubTitleProps {\n  text: string;\n  className?: string;\n}\n\nfunction SubTitle(props: SubTitleProps) {\n  return (\n    &lt;Text className={\\`text-2xl mb-5 text-primary \\${props.className}\\`}&gt;\n      {props.text}\n    &lt;/Text&gt;\n  );\n}\n\nexport { SubTitle };\" &gt; src/components/texts/SubTitle.tsx\n\n\necho \"import { Text } from \\\"react-native\\\";\n\ninterface TitleProps {\n  text: string;\n  className?: string;\n}\n\nfunction Title(props: TitleProps) {\n  return (\n    &lt;Text className={\\`text-4xl mt-10 mb-5 text-primary \\${props.className}\\`}&gt;\n      {props.text}\n    &lt;/Text&gt;\n  );\n}\n\nexport { Title };\" &gt; src/components/texts/Title.tsx\n\n\necho \"import { Feather } from \\\"@expo/vector-icons\\\";\nimport colors from \\\"tailwindcss/colors\\\";\n\ninterface IconProps {\n  name: keyof typeof Feather.glyphMap;\n  size?: number;\n}\n\nfunction Icon(props: IconProps) {\n  return (\n    &lt;Feather\n      name={props.name}\n      size={props.size ? props.size : 50}\n      color={colors.blue[500]}\n    /&gt;\n  );\n}\n\nexport { Icon };\" &gt; src/components/icons/Icon.tsx\n\n\necho \"import { TouchableOpacity, Text, GestureResponderEvent } from \\\"react-native\\\";\n\ninterface TertiaryButtonProps {\n  text: string;\n  btnClassName?: string;\n  textClassName?: string;\n  onPress?: (event: GestureResponderEvent) =&gt; void;\n}\n\nfunction TertiaryButton(props: TertiaryButtonProps) {\n  return (\n    &lt;TouchableOpacity\n      className={\\`border-2 my-2 mx-5 border-transparent rounded-xl \\${props.btnClassName}\\`}\n      onPress={props.onPress}\n    &gt;\n      &lt;Text\n        className={\\`text-xl text-center text-secondary py-2 px-5 \\${props.textClassName}\\`}\n      &gt;\n        {props.text}\n      &lt;/Text&gt;\n    &lt;/TouchableOpacity&gt;\n  );\n}\n\nexport { TertiaryButton };\" &gt; src/components/buttons/TertiaryButton.tsx\n\n\necho \"import { TouchableOpacity, Text, GestureResponderEvent } from \\\"react-native\\\";\n\ninterface SecondaryButtonProps {\n  text: string;\n  btnClassName?: string;\n  textClassName?: string;\n  onPress?: (event: GestureResponderEvent) =&gt; void;\n}\n\nfunction SecondaryButton(props: SecondaryButtonProps) {\n  return (\n    &lt;TouchableOpacity\n      className={\\`border-2 border-solid border-secondary my-2 mx-5 rounded-xl \\${props.btnClassName}\\`}\n      onPress={props.onPress}\n    &gt;\n      &lt;Text\n        className={\\`text-xl text-center text-secondary py-2 px-5 \\${props.textClassName}\\`}\n      &gt;\n        {props.text}\n      &lt;/Text&gt;\n    &lt;/TouchableOpacity&gt;\n  );\n}\n\nexport { SecondaryButton };\" &gt; src/components/buttons/SecondaryButton.tsx\n\n\necho \"import { TouchableOpacity, Text, GestureResponderEvent } from \\\"react-native\\\";\n\ninterface PrimaryButtonProps {\n  text: string;\n  btnClassName?: string;\n  textClassName?: string;\n  onPress?: (event: GestureResponderEvent) =&gt; void;\n}\n\nfunction PrimaryButton(props: PrimaryButtonProps) {\n  return (\n    &lt;TouchableOpacity\n      className={\\`border-2 border-solid border-primary bg-primary rounded-xl my-2 mx-5 \\${props.btnClassName}\\`}\n      onPress={props.onPress}\n    &gt;\n      &lt;Text\n        className={\\`text-xl text-center text-baseColor py-2 px-5 \\${props.textClassName}\\`}\n      &gt;\n        {props.text}\n      &lt;/Text&gt;\n    &lt;/TouchableOpacity&gt;\n  );\n}\n\nexport { PrimaryButton };\" &gt; src/components/buttons/PrimaryButton.tsx\n\n\necho \"import { SafeAreaView, ScrollView } from \\\"react-native\\\";\n\nimport { Title } from \\\"../components/texts/Title\\\";\nimport { SubTitle } from \\\"../components/texts/SubTitle\\\";\nimport { PrimaryButton } from \\\"../components/buttons/PrimaryButton\\\";\nimport { SecondaryButton } from \\\"../components/buttons/SecondaryButton\\\";\nimport { TertiaryButton } from \\\"../components/buttons/TertiaryButton\\\";\nimport { Icon } from \\\"../components/icons/Icon\\\";\nimport { Paragraph } from \\\"../components/texts/Paragraph\\\";\n\nexport function Home({ navigation }: { navigation: any }) {\n  return (\n    &lt;SafeAreaView className=\\\"bg-baseColor px-10 py-5 h-full w-full\\\"&gt;\n      &lt;ScrollView showsVerticalScrollIndicator={false}&gt;\n        &lt;Title text=\\\"Title\\\" /&gt;\n        &lt;SubTitle text=\\\"Subtitle\\\" /&gt;\n        &lt;PrimaryButton\n          text=\\\"Primary Btn\\\"\n          onPress={() =&gt; navigation.navigate(\\\"Details\\\")}\n        /&gt;\n        &lt;SecondaryButton text=\\\"Secondary Btn\\\" /&gt;\n        &lt;TertiaryButton text=\\\"Tertiary Btn\\\"/&gt;\n        &lt;Icon name=\\\"home\\\" /&gt;\n        &lt;Paragraph&gt;\n          Donec mollis ante dictum dapibus gravida. Pellentesque commodo dolor\n          vel ante molestie, ac lacinia diam ullamcorper. Phasellus ante urna,\n          lobortis sit amet cursus in, consequat non libero. Nam accumsan mauris\n          sed consectetur sodales. Cras erat quam, rutrum ultrices tempor a,\n          efficitur eget metus.\n        &lt;/Paragraph&gt;\n      &lt;/ScrollView&gt;\n    &lt;/SafeAreaView&gt;\n  );\n}\" &gt; src/screens/Home.tsx\n\necho \"import { View, Text, Button } from 'react-native';\n\nexport function Details({ navigation }: { navigation: any }) {\n  return (\n    &lt;View className=\\\"flex-1 justify-center items-center\\\" &gt;\n      &lt;Text&gt;Details&lt;/Text&gt;\n      &lt;Button\n        title=\\\"Go to Home\\\"\n        onPress={() =&gt; navigation.navigate('Home')}\n      /&gt;\n    &lt;/View&gt;\n  )\n}\" &gt; src/screens/Details.tsx\n\necho \"import * as React from \\\"react\\\";\nimport { NavigationContainer } from \\\"@react-navigation/native\\\";\nimport { createNativeStackNavigator } from \\\"@react-navigation/native-stack\\\";\nimport { StatusBar } from \\\"expo-status-bar\\\";\nimport colors from \\\"tailwindcss/colors\\\";\n\nimport { Home } from \\\"./src/screens/Home\\\";\nimport { Details } from \\\"./src/screens/Details\\\";\n\nconst Stack = createNativeStackNavigator();\n\nexport default function App() {\n  return (\n    &lt;NavigationContainer&gt;\n      &lt;StatusBar style=\\\"dark\\\" backgroundColor={colors.blue[200]} /&gt;\n      &lt;Stack.Navigator screenOptions={{ headerTransparent: true, title: \\\"\\\" }}&gt;\n        &lt;Stack.Screen name=\\\"Home\\\" component={Home} /&gt;\n        &lt;Stack.Screen name=\\\"Details\\\" component={Details} /&gt;\n        {/* Other screens here */}\n      &lt;/Stack.Navigator&gt;\n    &lt;/NavigationContainer&gt;\n  );\n}\" &gt; App.tsx\n\necho \"/// &lt;reference types=\\\"nativewind/types\\\" /&gt;\" &gt; app.d.ts\n\necho \"/** @type {import('tailwindcss').Config} */\n\nconst colors = require(\\\"tailwindcss/colors\\\");\n\nmodule.exports = {\n  content: [\\\"./App.tsx\\\", \\\"./src/**/*.tsx\\\"],\n  theme: {\n    extend: {\n      colors: {\n        baseColor: colors.blue[200],\n        primary: colors.blue[700],\n        secondary: colors.blue[500],\n      },\n    },\n  },\n  plugins: [],\n};\n\" &gt; tailwind.config.js\n\necho \"module.exports = function(api) {\n  api.cache(true);\n  return {\n    presets: ['babel-preset-expo'],\n    plugins: ['nativewind/babel'],\n  };\n};\" &gt; babel.config.js\n\ngit add .\ngit commit -m \"automated task done\"\n\nnpm run start\n</code></pre>"},{"location":"vercel/","title":"Vercel","text":"<ul> <li>Deploy</li> </ul>"},{"location":"vercel/deploy/","title":"Deploy","text":""},{"location":"vercel/deploy/#django","title":"Django","text":"vercel.json <pre><code>{\n  \"builds\": [\n    {\n      \"src\": \"PROJECT/wsgi.py\",\n      \"use\": \"@vercel/python\",\n      \"config\": {\n        \"maxLambdaSize\": \"300mb\",\n        \"runtime\": \"python3.9\"\n      }\n    },\n    {\n      \"src\": \"deploy.sh\",\n      \"use\": \"@vercel/static-build\",\n      \"config\": {\n        \"distDir\": \"staticfiles\"\n      }\n    }\n  ],\n  \"routes\": [\n    {\n      \"src\": \"/(.*)\",\n      \"dest\": \"PROJECT/wsgi.py\"\n    }\n  ]\n}\n</code></pre>"}]}