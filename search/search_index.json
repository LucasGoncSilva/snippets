{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Snippets","text":"<ul> <li>Python</li> <li>Vercel</li> </ul>"},{"location":"python/","title":"Python","text":"<ul> <li>Django</li> <li>Selenium</li> </ul>"},{"location":"python/django/","title":"Django","text":""},{"location":"python/django/#orchestratorpy","title":"<code>orchestrator.py</code>","text":"orchestrator.py <pre><code>from time import sleep\nfrom os import environ, system, listdir\nfrom os.path import isdir\nfrom sys import argv\n\n\nenviron['DEBUG'] = 'True'\nenviron['ALLOWED_HOSTS'] = '* 127.0.0.1'\nenviron['DJANGO_SETTINGS_MODULE'] = '*****.settings.base'\n\nenviron['EMAIL_HOST_USER'] = '*****'\nenviron['EMAIL_HOST_PASSWORD'] = '*****'\n\n\nsystem('black -S .')\n# system('find -name \"*.pyc\" -type f -delete')\nsystem('rm -rf `find -type d -name __pycache__`')\n\n\ndef collectstatic():\n    system('python3 manage.py collectstatic --noinput')\n\ndef makemigrations():\n    exclude_list = ['.git', '.github', '.vscode', 'templates', 'static', 'CORE', 'LIPSUM', 'requirements', 'staticfiles', 'env']\n    apps = [d for d in listdir('.') if isdir(d) and d not in exclude_list]\n    system('python3 manage.py makemigrations ' + ' '.join(apps))\n\ndef migrate():\n    system('python3 manage.py migrate')    \n\ndef test():\n    makemigrations()\n    migrate()\n    environ['DEBUG'] = 'False'\n    system('python3 manage.py collectstatic --noinput')\n\ndef cleardb():\n    system('rm -rf `find -type d -name migrations -not -path \"./env/*\"`')\n    system('find -name \"*.sqlite3\" -type f -delete')\n    exit(0)\n\ndef populatedb():\n    makemigrations()\n    migrate()\n    system(...)\n\ndef docker():\n    system(...)\n\nif argv[1] == 'runserver' and environ.get('DEBUG') == 'False': collectstatic()\nelif argv[1] == 'makemigrations': makemigrations(); exit()\nelif argv[1] == 'test': test()\nelif argv[1] == 'cleardb': cleardb()\nelif argv[1] == 'populatedb': populatedb(); exit()\nelif argv[1] == 'docker': docker(); system('python3 manage.py ' + ' '.join([i for i in argv[1:]])); exit()\n\n\nsleep(10)\nsystem('python3 manage.py ' + ' '.join([i for i in argv[1:]]))\n</code></pre>"},{"location":"python/django/#media-and-static","title":"MEDIA and STATIC","text":"settings.py <pre><code>STATIC_URL = '/static/'\nSTATIC_ROOT = BASE_DIR / 'staticfiles'\nSTATICFILES_DIRS = [\n    BASE_DIR / 'static',\n]\nSTATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'\n</code></pre> urls.py <pre><code>urlpatterns += static(settings.MEDIA_URL, documemt_root=settings.MEDIA_ROOT)\nurlpatterns += static(settings.STATIC_URL, documemt_root=settings.STATIC_ROOT)\n</code></pre>"},{"location":"python/django/#custom-user","title":"Custom User","text":"models.py <pre><code>from django.contrib.auth.models import AbstractUser\nfrom django.db import models\n\n\n# Create your models here.\nclass User(AbstractUser):\n    first_name = models.CharField(max_length=150, blank=True)\n    last_name = models.CharField(max_length=150, blank=True)\n    email: object = models.EmailField(unique=True)\n\n\nclass ActivationAccountToken(models.Model):\n    value: object = models.CharField(max_length=128)\n    used: object = models.BooleanField(default=False, verbose_name='Usado?')\n    created: object = models.DateTimeField(auto_now_add=True)\n\n    class Meta:\n        verbose_name = 'Token de Ativa\u00e7\u00e3o'\n        verbose_name_plural = 'Tokens de Ativa\u00e7\u00e3o'\n\n    def __str__(self) -&gt; str:\n        return f'{self.value}'\n</code></pre> forms.py <pre><code>from django.contrib.auth import forms\n\nfrom .models import User\n\n\nclass UserChangeForm(forms.UserChangeForm):\n    class Meta(forms.UserChangeForm.Meta):\n        model = User\n\n\nclass UserCreationForm(forms.UserCreationForm):\n    class Meta(forms.UserCreationForm.Meta):\n        model = User\n</code></pre> admin.py <pre><code>from django.contrib import admin\nfrom django.contrib.auth import admin as auth_admin\n\nfrom .models import User, ActivationAccountToken\nfrom .forms import UserChangeForm, UserCreationForm\n\n\n# Register your models here.\n@admin.register(User)\nclass UserAdmin(auth_admin.UserAdmin):\n    add_fieldsets = (\n        (\n            None,\n            {\n                'classes': ('wide',),\n                'fields': (\n                    'username',\n                    'first_name',\n                    'last_name',\n                    'email',\n                    'password1',\n                    'password2',\n                ),\n            },\n        ),\n    )\n    form = UserChangeForm\n    add_form = UserCreationForm\n\n\nadmin.site.register(ActivationAccountToken)\n</code></pre> app/urls.py <pre><code>from django.urls import path, URLPattern\n\nfrom . import views\n\n\napp_name = 'account'\n\nurlpatterns: list[URLPattern] = [\n    path('registrar', views.register_view, name='register'),\n    path('ativar/&lt;uidb64&gt;/&lt;token&gt;', views.activate_account, name='activate'),\n    path('entrar', views.login_view, name='login'),\n    path('sair', views.logout_view, name='logout'),\n]\n</code></pre> views.py <pre><code>from django.shortcuts import get_object_or_404\nfrom django.utils.encoding import force_str\nfrom django.utils.http import urlsafe_base64_decode\nfrom django.urls import reverse\nfrom django.shortcuts import render\nfrom django.contrib.auth import authenticate, login, logout\nfrom django.contrib.auth.models import AbstractBaseUser\nfrom django.contrib.auth.decorators import login_required\nfrom django.http import HttpRequest, HttpResponse, HttpResponseRedirect, Http404\nfrom django.forms import Form, CharField, TextInput, EmailField, PasswordInput\nfrom django.contrib import messages\n\nfrom .models import User, ActivationAccountToken\nfrom mail.views import send_activate_account_token, send_activate_account_done\n\n\n# Create your views here.\nclass RegisterForm(Form):\n    username: object = CharField(\n        label='',\n        max_length=50,\n        required=True,\n        widget=TextInput(\n            attrs={\n                'placeholder': 'Username (nome de usu\u00e1rio)*',\n                'class': 'py-2',\n                'style': 'text-align: center;',\n                'autofocus': 'autofocus',\n            }\n        ),\n        help_text='50 caracteres ou menos. Letras, n\u00fameros e @/./+/-/_ apenas.',\n    )\n    first_name: object = CharField(\n        label='',\n        required=True,\n        widget=TextInput(\n            attrs={\n                'placeholder': 'Nome*',\n                'class': 'mt-3 py-2',\n                'style': 'text-align: center;',\n            }\n        ),\n    )\n    last_name: object = CharField(\n        label='',\n        required=True,\n        widget=TextInput(\n            attrs={\n                'placeholder': 'Sobrenome*',\n                'class': 'py-2',\n                'style': 'text-align: center;',\n            }\n        ),\n    )\n    email: object = EmailField(\n        label='',\n        required=True,\n        widget=TextInput(\n            attrs={\n                'placeholder': 'Email*',\n                'class': 'mt-3 py-2',\n                'style': 'text-align: center;',\n            }\n        ),\n    )\n    password: object = CharField(\n        label='',\n        required=True,\n        widget=PasswordInput(\n            attrs={\n                'placeholder': 'Senha*',\n                'class': 'mt-3 py-2',\n                'style': 'text-align: center;',\n            }\n        ),\n    )\n    password2: object = CharField(\n        label='',\n        required=True,\n        widget=PasswordInput(\n            attrs={\n                'placeholder': 'Confirma\u00e7\u00e3o de senha*',\n                'class': 'mb-5 py-2',\n                'style': 'text-align: center;',\n            }\n        ),\n    )\n\n\nclass LogInForm(Form):\n    username = CharField(\n        label='',\n        required=True,\n        widget=TextInput(\n            attrs={\n                'placeholder': 'Username*',\n                'class': 'py-2',\n                'style': 'text-align: center;',\n                'autofocus': 'autofocus',\n            }\n        ),\n    )\n    password: object = CharField(\n        label='',\n        required=True,\n        widget=PasswordInput(\n            attrs={\n                'placeholder': 'Pass*',\n                'class': 'mt-3 py-2',\n                'style': 'text-align: center;',\n            }\n        ),\n    )\n\n\ndef register_view(r: HttpRequest) -&gt; HttpResponse | HttpResponseRedirect:\n    if r.user.is_authenticated:\n        return HttpResponseRedirect(reverse('home:index'))\n\n    elif r.method == 'POST':\n        form: Form = RegisterForm(r.POST)\n\n        if form.is_valid():\n            password: str = form.cleaned_data.get('password')\n            password2: str = form.cleaned_data.get('password2')\n\n            if not password or not password2 or password != password2:\n                messages.error(r, 'Senhas n\u00e3o compat\u00edveis')\n                return render(r, 'account/register.html', {'form': form})\n\n            username: str = form.cleaned_data.get('username')\n            email: str = form.cleaned_data.get('email')\n\n            if (\n                User.objects.filter(username=username).exists()\n                or User.objects.filter(email=email).exists()\n            ):\n                messages.error(r, 'Username e/ou e-mail indispon\u00edvel')\n                return render(r, 'account/register.html', {'form': form})\n\n            first_name: str = form.cleaned_data.get('first_name')\n            last_name: str = form.cleaned_data.get('last_name')\n\n            user: User = User.objects.create_user(\n                username=username,\n                first_name=first_name,\n                last_name=last_name,\n                email=email,\n                password=password,\n                is_active=False,\n            )\n\n            send_activate_account_token(r.get_host(), user, password)\n\n            messages.success(\n                r, 'Conta criada. Acesse seu e-mail para ativar sua conta.'\n            )\n            return HttpResponseRedirect(reverse('account:login'))\n\n        return render(r, 'account/register.html', {'form': form})\n\n    form: Form = RegisterForm()\n    return render(r, 'account/register.html', {'form': form})\n\n\ndef activate_account(r: HttpRequest, uidb64: str, token: str) -&gt; HttpResponseRedirect:\n    token_obj: ActivationAccountToken = get_object_or_404(\n        ActivationAccountToken, value=token, used=False\n    )\n\n    user: User | None = None\n\n    try:\n        id: int = int(force_str(urlsafe_base64_decode(uidb64)))\n        user = get_object_or_404(User, pk=id)\n\n    except (TypeError, ValueError, OverflowError, User.DoesNotExist):\n        user = None\n\n    if user is not None:\n        user.is_active = True\n        user.save()\n\n        token_obj.used = True\n        token_obj.save()\n\n        login(r, user)\n\n        send_activate_account_done(str(user.email))\n\n        return HttpResponseRedirect(reverse('home:index'))\n\n    raise Http404()\n\n\ndef login_view(r: HttpRequest) -&gt; HttpResponse | HttpResponseRedirect:\n    if r.user.is_authenticated:\n        return HttpResponseRedirect(reverse('home:index'))\n\n    elif r.method == 'POST':\n        form: Form = LogInForm(r.POST)\n\n        if not form.is_valid():\n            return render(r, 'account/login.html', {'form': form})\n\n        username: str = str(form.cleaned_data.get('username')).strip()\n        password: str = str(form.cleaned_data.get('password')).strip()\n\n        user: AbstractBaseUser | None = authenticate(\n            username=username, password=password\n        )\n\n        if user is None:\n            messages.error(r, 'Username e/ou senha inv\u00e1lida')\n            return render(r, 'account/login.html', {'form': form})\n\n        login(r, user)\n        return HttpResponseRedirect(reverse('home:index'))\n\n    return render(r, 'account/login.html', {'form': LogInForm()})\n\n\n@login_required(login_url='/conta/entrar')\ndef logout_view(r: HttpRequest) -&gt; HttpResponse | HttpResponseRedirect:\n    if r.method == 'POST':\n        logout(r)\n        return HttpResponseRedirect(reverse('account:login'))\n\n    return render(r, 'account/logout.html')\n</code></pre> &lt;project&gt;/urls.py <pre><code>from django.contrib.auth.views import (\n    PasswordResetView,\n    PasswordResetDoneView,\n    PasswordResetConfirmView,\n    PasswordResetCompleteView,\n)\n\nurlpatterns += [\n    path('reset', PasswordResetView.as_view(template_name='account/password_reset.html'), name='password_reset',),\n    path('reset-enviado', PasswordResetDoneView.as_view(template_name='account/password_reset_done.html'), name='password_reset_done',),\n    path('reset/&lt;uidb64&gt;/&lt;token&gt;', PasswordResetConfirmView.as_view(template_name='account/password_reset_confirm.html' ), name='password_reset_confirm',),\n    path('reset-concluido', PasswordResetCompleteView.as_view(template_name='account/password_reset_complete.html' ), name='password_reset_complete',),\n]\n</code></pre> Reset password HTML snippet HTML<pre><code>&lt;form method=\"post\" autocomplete=\"off\"&gt;\n    {% csrf_token %}\n\n    &lt;h1&gt;Redefinir Senha&lt;/h1&gt;\n    &lt;h6&gt;Lorem ipsum dolor sit amet&lt;/h6&gt;\n\n    &lt;br&gt;\n\n    {{ form|crispy }}\n\n    &lt;form method=\"post\" autocomplete=\"off\"&gt;\n    {% csrf_token %}\n\n    &lt;h1&gt;Redefinir Senha&lt;/h1&gt;\n    &lt;h6&gt;Certifique-se de inserir a mesma senha nos dois campos&lt;/h6&gt;\n\n    &lt;br&gt;\n\n    {{ form|crispy }}\n\n    {% if messages %}\n    {% for message in messages %}\n    &lt;div class='alert {{ message.tags }} mt-3 py-2' role='alert'&gt;{{ message }}&lt;/div&gt;\n    {% endfor %}\n    {% endif %}\n\n    &lt;div&gt;\n        &lt;input id=\"confirm-btn\" class=\"btn btn-primary mt-4\" type=\"submit\" value=\"Enviar e-mail\"&gt;\n    &lt;/div&gt;\n\n&lt;/form&gt;{% endif %}\n\n    &lt;div&gt;\n        &lt;input id=\"confirm-btn\" class=\"btn btn-primary mt-4\" type=\"submit\" value=\"Enviar e-mail\"&gt;\n    &lt;/div&gt;\n\n&lt;/form&gt;\n</code></pre> settings.py <pre><code># User Model\nAUTH_USER_MODEL = 'account.User'\nLOGOUT_REDIRECT_URL = 'conta/entrar'\n</code></pre>"},{"location":"python/django/#e-mail","title":"E-mail","text":"settings.py <pre><code># E-mail configs\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = environ.get('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = environ.get('EMAIL_HOST_PASSWORD')\n</code></pre> Send activation and confirm e-mails with <code>.py</code> <pre><code>from typing import Final\nfrom hashlib import sha256\n\nfrom django.urls import reverse\nfrom django.utils.encoding import force_bytes\nfrom django.utils.http import urlsafe_base64_encode\nfrom django.http import HttpRequest, HttpResponseRedirect\nfrom django.core.mail import EmailMessage\nfrom django.conf import settings\nfrom django.contrib import messages\n\nfrom &lt;user_app&gt;.models import User, ActivationAccountToken\nfrom secret.models import Card, LoginCredential, SecurityNote\n\n\n# Create your views here.\nACTIVATE_ACCOUNT_TOKEN_SEND: Final = \"\"\"\nSua conta foi criada com sucesso, contudo, voc\u00ea deve ativ\u00e1-la. Para fazer isso, clique no link abaixo:\n\n{domain}/conta/ativar/{uidb64}/{token}\n\n\nEquipe Lipsum\n\"\"\"\n\nACTIVATE_ACCOUNT_CONFIRM_DONE: Final = \"\"\"\nA partir de agora a sua conta est\u00e1 ativa e voc\u00ea pode utilizar dos recursos do sistema para armazenar seus dados sens\u00edveis.\n\n\nEquipe Lipsum\n\"\"\"\n\n\ndef export_secrets(r: HttpRequest, secret_type: str) -&gt; HttpResponseRedirect:\n    csvfile: StringIO = StringIO()\n    csvwriter = writer(csvfile, delimiter='\u00ac', doublequote=True)\n\n    email: EmailMessage = EmailMessage(\n        subject='Exporta\u00e7\u00e3o de Segredos | Lipsum',\n        body=f'Aqui est\u00e3o seus segredos armazenados em \"{secret_type}\" no Lipsum.\\n\\n\\nEquipe Lipsum',\n        from_email=settings.EMAIL_HOST_USER,\n        to=[r.user.email],\n    )\n\n    if secret_type == 'Credenciais':\n        if not LoginCredential.objects.filter(owner=r.user).exists():\n            messages.error(r, 'N\u00e3o h\u00e1 credenciais para exportar.')\n            return HttpResponseRedirect(reverse('secret:credential_list_view'))\n\n        csvwriter.writerow(\n            ['Servi\u00e7o', 'Apelido', 'Login 3rd', 'Apelido Login 3rd', 'Login', 'Senha']\n        )\n\n        for i in LoginCredential.objects.filter(owner=r.user):\n            csvwriter.writerow(\n                [\n                    i.get_service_display(),\n                    i.name,\n                    i.thirdy_party_login,\n                    i.thirdy_party_login_name,\n                    i.login,\n                    i.password,\n                ]\n            )\n\n        email.attach('credenciais.csv', csvfile.getvalue(), 'text/csv')\n        email.send()\n\n        messages.success(r, 'Credenciais exportadas com sucesso.')\n        return HttpResponseRedirect(reverse('secret:credential_list_view'))\n\n    elif secret_type == 'Cart\u00f5es':\n        if not Card.objects.filter(owner=r.user).exists():\n            messages.error(r, 'N\u00e3o h\u00e1 cart\u00f5es para exportar.')\n            return HttpResponseRedirect(reverse('secret:card_list_view'))\n\n        csvwriter.writerow(\n            [\n                'Apelido',\n                'Tipo',\n                'N\u00famero',\n                'Expira\u00e7\u00e3o',\n                'CVV',\n                'Banco',\n                'Bandeira',\n                'Titular',\n            ]\n        )\n\n        for i in Card.objects.filter(owner=r.user):\n            csvwriter.writerow(\n                [\n                    i.name,\n                    i.get_card_type_display(),\n                    i.number,\n                    i.expiration,\n                    i.cvv,\n                    i.get_bank_display(),\n                    i.get_brand_display(),\n                    i.owners_name,\n                ]\n            )\n\n        email.attach('cartoes.csv', csvfile.getvalue(), 'text/csv')\n        email.send()\n\n        messages.success(r, 'Cart\u00f5es exportados com sucesso.')\n        return HttpResponseRedirect(reverse('secret:card_list_view'))\n\n    elif secret_type == 'Anota\u00e7\u00f5es':\n        if not SecurityNote.objects.filter(owner=r.user).exists():\n            messages.error(r, 'N\u00e3o h\u00e1 anota\u00e7\u00f5es para exportar.')\n            return HttpResponseRedirect(reverse('secret:note_list_view'))\n\n        csvwriter.writerow(['T\u00edtulo', 'Conte\u00fado'])\n\n        for i in SecurityNote.objects.filter(owner=r.user):\n            csvwriter.writerow([i.title, i.content])\n\n        email.attach('anotacoes.csv', csvfile.getvalue(), 'text/csv')\n        email.send()\n\n        messages.success(r, 'Anota\u00e7\u00f5es exportadas com sucesso.')\n        return HttpResponseRedirect(reverse('secret:note_list_view'))\n\n    else:\n        return HttpResponseRedirect(reverse('home:index'))\n\n\ndef send_activate_account_token(domain: str, user: User, password: str) -&gt; None:\n    token_hash = sha256(f'{user.username}{password}'.encode()).hexdigest()\n    uidb64 = urlsafe_base64_encode(force_bytes(user.pk))\n\n    ActivationAccountToken.objects.create(value=token_hash, used=False)\n\n    email: EmailMessage = EmailMessage(\n        subject='Ativa\u00e7\u00e3o de Conta | Lipsum',\n        body=ACTIVATE_ACCOUNT_TOKEN_SEND.format(\n            domain=domain, uidb64=uidb64, token=token_hash\n        ),\n        from_email=settings.EMAIL_HOST_USER,\n        to=[str(user.email)],\n    )\n    email.send()\n\n\ndef send_activate_account_done(user_email: str) -&gt; None:\n    email: EmailMessage = EmailMessage(\n        subject='Ativa\u00e7\u00e3o de Conta | Lipsum',\n        body=ACTIVATE_ACCOUNT_CONFIRM_DONE,\n        from_email=settings.EMAIL_HOST_USER,\n        to=[user_email],\n    )\n    email.send()\n</code></pre>"},{"location":"python/django/#messages","title":"Messages","text":"settings.py <pre><code>from django.contrib.messages import constants as messages\n\n\n# Messages configs\nMESSAGE_TAGS = {\n    messages.DEBUG: 'alert-primary',\n    messages.ERROR: 'alert-danger',\n    messages.INFO: 'alert-info',\n    messages.SUCCESS: 'alert-success',\n    messages.WARNING: 'alert-warning',\n}\n</code></pre> Usage <code>.py</code> and <code>.html</code> <pre><code>from django.contrib import messages\n\n\nmessages.debug(r, 'Message content')\nmessages.error(r, 'Message content')\nmessages.info(r, 'Message content')\nmessages.success(r, 'Message content')\nmessages.warning(r, 'Message content')\n</code></pre> <pre><code>{% if messages %}\n    {% for message in messages %}\n        &lt;div class='alert {{ message.tags }} mt-3 py-2' role='alert'&gt;{{ message }}&lt;/div&gt;\n    {% endfor %}\n{% endif %}\n</code></pre>"},{"location":"python/django/#db-integration","title":"DB Integration","text":"Connection <pre><code>DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': environ.get('DATABASE_NAME'),\n        'USER': environ.get('DATABASE_USER'),\n        'PASSWORD': environ.get('DATABASE_PASSWORD'),\n        'HOST': environ.get('DATABASE_HOST'),\n        'PORT': '5432',\n    }\n}\n</code></pre>"},{"location":"python/django/#deploypy","title":"<code>deploy.py</code>","text":"deploy.py <pre><code>from &lt;project_name&gt;.settings.base import *\n\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': environ.get('DATABASE_NAME'),\n        'USER': environ.get('DATABASE_USER'),\n        'PASSWORD': environ.get('DATABASE_PASSWORD'),\n        'HOST': environ.get('DATABASE_HOST'),\n        'PORT': '5432',\n    }\n}\n\nDEBUG = bool(environ.get('DEBUG', 'False'))\nSECRET_KEY = environ.get('SECRET_KEY')\nALLOWED_HOSTS = str(environ.get('ALLOWED_HOSTS')).split(' ')\n\n\n# http -&gt; https redirect\nSECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')\nSECURE_SSL_REDIRECT = True\n</code></pre>"},{"location":"python/django/#custom-err-pages","title":"Custom err pages","text":"&lt;project&gt;/urls.py <pre><code>handler403 = '&lt;err_app&gt;.views.handle403'\nhandler404 = '&lt;err_app&gt;.views.handle404'\nhandler500 = '&lt;err_app&gt;.views.handle500'\n</code></pre> &lt;err_app&gt;/views.py <pre><code>from typing import Any\n\nfrom django.shortcuts import render\nfrom django.http import HttpRequest, HttpResponse\n\n\n# Create your views here.\ndef handle&lt;code: int&gt;(r: HttpRequest, *args: Any, **kwargs: Any) -&gt; HttpResponse:\n    return render(\n        r,\n        'err/error_template.html',\n        {...}\n    )\n</code></pre>"},{"location":"python/django/#security","title":"Security","text":"settings.py <pre><code>SESSION_COOKIE_SECURE = True\nCSRF_COOKIE_SECURE = True\n</code></pre>"},{"location":"python/selenium/","title":"Selenium","text":""},{"location":"python/selenium/#webdriver","title":"WebDriver","text":"Default <pre><code>from selenium.webdriver import Firefox, FirefoxOptions\nfrom selenium.webdriver.remote.webelement import WebElement\n\n\noptions: FirefoxOptions = FirefoxOptions()\noptions.add_argument(\"--headless\")\noptions.add_argument(\"--window-size=1920,1080\")\n\ndriver: Firefox = Firefox(options=options)\ndriver.implicitly_wait(30)\n</code></pre> OOP with <code>unittest</code> <pre><code>import unittest\nfrom selenium.webdriver import Firefox, FirefoxOptions\nfrom selenium.webdriver.remote.webelement import WebElement\n\n\nclass BaseTestCase(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls, new: bool = False) -&gt; None:\n        if new:\n            options: FirefoxOptions = FirefoxOptions()\n            options.add_argument(\"--headless\")\n            options.add_argument(\"--window-size=1920,1080\")\n\n            cls.driver: Firefox = Firefox(options=options)\n            cls.driver.implicitly_wait(30)\n\n    @classmethod\n    def tearDownClass(cls) -&gt; None:\n        cls.driver.quit()\n\n    @classmethod\n    def firefox_scroll(cls, e: WebElement):\n        x = e.location[\"x\"]\n        y = e.location[\"y\"]\n        scroll_by_coord = f\"window.scrollTo({x}, {y});\"\n        scroll_nav_out_of_way = \"window.scrollBy(0, -120);\"\n        cls.driver.execute_script(scroll_by_coord)\n        cls.driver.execute_script(scroll_nav_out_of_way)\n</code></pre>"},{"location":"vercel/","title":"Vercel","text":"<ul> <li>Deploy</li> </ul>"},{"location":"vercel/deploy/","title":"Deploy","text":""},{"location":"vercel/deploy/#django","title":"Django","text":"vercel.json vercel.json<pre><code>{\n  \"builds\": [\n    {\n      \"src\": \"LIPSUM/wsgi.py\",\n      \"use\": \"@vercel/python\",\n      \"config\": {\n        \"maxLambdaSize\": \"300mb\",\n        \"runtime\": \"python3.9\"\n      }\n    },\n    {\n      \"src\": \"deploy.sh\",\n      \"use\": \"@vercel/static-build\",\n      \"config\": {\n        \"distDir\": \"staticfiles\"\n      }\n    }\n  ],\n  \"routes\": [\n    {\n      \"src\": \"/(.*)\",\n      \"dest\": \"LIPSUM/wsgi.py\"\n    }\n  ]\n}\n</code></pre>"}]}