{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"Text Only<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"django/","title":"Django","text":"orchestrator.py<pre><code>from time import sleep\nfrom os import environ, system, listdir\nfrom os.path import isdir\nfrom sys import argv\n\n\nenviron['DEBUG'] = 'True'\nenviron['ALLOWED_HOSTS'] = '* 127.0.0.1'\nenviron['DJANGO_SETTINGS_MODULE'] = '*****.settings.base'\n\nenviron['EMAIL_HOST_USER'] = '*****'\nenviron['EMAIL_HOST_PASSWORD'] = '*****'\n\n\nsystem('black -S .')\n# system('find -name \"*.pyc\" -type f -delete')\nsystem('rm -rf `find -type d -name __pycache__`')\n\n\ndef collectstatic():\n    system('python3 manage.py collectstatic --noinput')\n\ndef makemigrations():\n    exclude_list = ['.git', '.github', '.vscode', 'templates', 'static', 'CORE', 'LIPSUM', 'requirements', 'staticfiles', 'env']\n    apps = [d for d in listdir('.') if isdir(d) and d not in exclude_list]\n    system('python3 manage.py makemigrations ' + ' '.join(apps))\n\ndef migrate():\n    system('python3 manage.py migrate')    \n\ndef test():\n    makemigrations()\n    migrate()\n    environ['DEBUG'] = 'False'\n    system('python3 manage.py collectstatic --noinput')\n\ndef cleardb():\n    system('rm -rf `find -type d -name migrations -not -path \"./env/*\"`')\n    system('find -name \"*.sqlite3\" -type f -delete')\n    exit(0)\n\ndef populatedb():\n    makemigrations()\n    migrate()\n    system(...)\n\ndef docker():\n    system(...)\n\nif argv[1] == 'runserver' and environ.get('DEBUG') == 'False': collectstatic()\nelif argv[1] == 'makemigrations': makemigrations(); exit()\nelif argv[1] == 'test': test()\nelif argv[1] == 'cleardb': cleardb()\nelif argv[1] == 'populatedb': populatedb(); exit()\nelif argv[1] == 'docker': docker(); system('python3 manage.py ' + ' '.join([i for i in argv[1:]])); exit()\n\n\nsleep(10)\nsystem('python3 manage.py ' + ' '.join([i for i in argv[1:]]))\n</code></pre>"},{"location":"vercel/","title":"Vercel","text":"vercel.json<pre><code>{\n  \"builds\": [\n    {\n      \"src\": \"LIPSUM/wsgi.py\",\n      \"use\": \"@vercel/python\",\n      \"config\": {\n        \"maxLambdaSize\": \"300mb\",\n        \"runtime\": \"python3.9\"\n      }\n    },\n    {\n      // \"src\": \"deploy.sh\",\n      \"use\": \"@vercel/static-build\",\n      \"config\": {\n        \"distDir\": \"staticfiles\"\n      }\n    }\n  ],\n  \"routes\": [\n    {\n      \"src\": \"/(.*)\",\n      \"dest\": \"LIPSUM/wsgi.py\"\n    }\n  ]\n}\n</code></pre>"}]}